au VimEnter * silent! !xmodmap -e 'remove Lock = Caps_Lock' -e 'keysym Caps_Lock = Escape'
au VimLeave * silent! !xmodmap -e 'keycode 66 = Caps_Lock' -e 'add Lock = Caps_Lock'

filetype on
filetype indent on
filetype plugin on
filetype plugin indent on
set incsearch
set ignorecase
set smartcase
set nocompatible

"set foldmethod=syntax
"set fdm=marker
set foldenable
set foldmethod=indent
set foldlevel=99

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')
" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'
" Add all your plugins here (note older versions of Vundle used Bundle instead of Plugin)
Plugin 'Yggdroot/indentLine'
Plugin 'scrooloose/nerdtree'
Plugin 'majutsushi/tagbar'
Plugin 'jacoborus/tender.vim'
Plugin 'connorholyday/vim-snazzy'
"Plugin 'ycm-core/YouCompleteMe'
" All of your Plugins must be added before the following line
call vundle#end()            " required


let g:SnazzyTransparent = 1
colorscheme snazzy

exec "nohlsearch"

" 设置对齐线开/关快捷键
nmap <leader>il :IndentLinesToggle<CR>
" 设置Gvim的对齐线样式
let g:indentLine_char = "┊"
let g:indentLine_first_char = "┊"
" 设置对齐线默认开1/关0状态
let g:indentLine_enabled = 1
" 设置 GUI 对齐线颜色，如果不喜欢可以将其注释掉采用默认颜色
let g:indentLine_color_gui = '#A4E57E'
" 设置终端对齐线颜色，如果不喜欢可以将其注释掉采用默认颜色
let g:indentLine_color_term = 180

"nmap tt :NERDTreeToggle<CR>
map tt :NERDTreeToggle<CR>
let NERDTreeMapOpenExpl = ""
let NERDTreeMapUpdir = ""
let NERDTreeMapUpdirKeepOpen = "l"
let NERDTreeMapOpenSplit = ""
let NERDTreeOpenVSplit = ""
let NERDTreeMapActivateNode = "i"
let NERDTreeMapOpenInTab = "o"
let NERDTreeMapPreview = ""
let NERDTreeMapCloseDir = "n"
let NERDTreeMapChangeRoot = "y"

"let g:tagbar_ctags_bin='/usr/bin/ctags'
nmap T :TagbarToggle<CR>
"let g:tagbar_width=40
"let g:tagbar_right=1
"let g:tagbar_left=1
let g:tagbar_autoclose=1
autocmd BufReadPost *.py,*.cpp,*.c,*.h,*.hpp,*.cc,*.cxx call tagbar#autoopen()
"map <silent> T :TagbarOpenAutoClose<CR>
set encoding=utf-8
set number

syntax enable
syntax on

" If you have vim >=8.0 or Neovim >= 0.1.5
if (has("termguicolors"))
 set termguicolors
endif

" For Neovim 0.1.3 and 0.1.4
let $NVIM_TUI_ENABLE_TRUE_COLOR=1

"colorscheme desert
"colorscheme tender
"set lighline theme inside lightline config
"let g:lightline = { 'colorscheme': 'tender' }
"set airline theme
"let g:airline_theme = 'tender'

set showcmd
let g:powerline_pycmd="py3"
set laststatus=2
set t_Co=256
set autoindent
set tabstop=4
set shiftwidth=4
set expandtab
set softtabstop=4
set cursorline
"set textwidth=100
set nowrap
set ruler
set showmatch
set hlsearch
set noerrorbells
set history=1000
set autoread
"set listchars=tab:>>■,trail:■·
set listchars=tab:+·,trail:·
set list
set wildmenu
set wildmode=longest:list,full
"set completeopt=preview,menu
let mapleader=" "

noremap <LEADER><CR> :nohlsearch<CR>
map <LEADER><right> <C-w>l
map <LEADER><up> <C-w>k
map <LEADER><left> <C-w>h
map <LEADER><down> <C-w>j

map <up><up> :res -5<CR>
map <down><down> :res +5<CR>
map <left><left> :vertical resize-5<CR>
map <right><right> :vertical resize+5<CR>

map s <nop>
map S :w<CR>
map Q :q!<CR>
map R :source $MYVIMRC<CR>
map ; :

map s<right> :set splitright<CR>:vsplit<CR>
"map s<> :set nosplitright<CR>:vsplit<CR>
"map s<> :set nosplitbelow<CR>:split<CR>
map s<down> :set splitbelow<CR>:split<CR>

"一键运行代码
map B :call CompileRunGcc()<CR>
    func! CompileRunGcc()
        exec "w"
if &filetype == 'c'
            exec "!g++ % -o %<"
            exec "!time ./%<"
elseif &filetype == 'cpp'
            exec "!g++ % -o %<"
            exec "!time ./%<"
elseif &filetype == 'java'
            exec "!javac %"
            exec "!time java %<"
elseif &filetype == 'sh'
            :!time bash %
elseif &filetype == 'python'
            exec "!time python3 %"
elseif &filetype == 'html'
            exec "!firefox % &"
elseif &filetype == 'go'
    "        exec "!go build %<"
            exec "!time go run %"
elseif &filetype == 'mkd'
            exec "!~/.vim/markdown.pl % > %.html &"
            exec "!firefox %.html &"
endif
    endfunc


let g:ycm_python_binary_path = '/usr/bin/python3'
let g:ycm_global_ycm_extra_conf='~/.ycm_extra_conf.py'

"nnoremap <c-k> :YcmCompleter GoToDeclaration<CR>|
"nnoremap <c-h> :YcmCompleter GoToDefinition<CR>| 
"nnoremap <c-j> :YcmCompleter GoToDefinitionElseDeclaration<CR>|

nnoremap gd :YcmCompleter GoToDefinitionElseDeclaration<CR>
nnoremap gc :YcmCompleter GetDoc<CR>
nnoremap gt :YcmCompleter GetType<CR>
nnoremap gr :YcmCompleter GoToReferences<CR>
let g:ycm_autoclose_preview_window_after_completion=0
let g:ycm_autoclose_preview_window_after_insertion=1
let g:ycm_use_clangd = 0
let g:ycm_python_interpreter_path = "/bin/python3"
let g:ycm_python_binary_path = "/bin/python3"

let g:ycm_confirm_extra_conf = 0
"let g:ycm_complete_in_comments = 1
let g:ycm_seed_identifiers_with_syntax = 1
" 开启 YCM 基于标签引擎
let g:ycm_collect_identifiers_from_tags_files = 1
" 从第2个键入字符就开始罗列匹配项
let g:ycm_min_num_of_chars_for_completion=2
" 在注释输入中也能补全
let g:ycm_complete_in_comments = 1
" 在字符串输入中也能补全
let g:ycm_complete_in_strings = 1
" 注释和字符串中的文字也会被收入补全
let g:ycm_collect_identifiers_from_comments_and_strings = 1
" 弹出列表时选择第1项的快捷键(默认为<TAB>和<Down>)
let g:ycm_key_list_select_completion = ['<C-n>', '<Down>']
" 弹出列表时选择前1项的快捷键(默认为<S-TAB>和<UP>)
let g:ycm_key_list_previous_completion = ['<C-p>', '<Up>']
" 主动补全, 默认为<C-Space>
"let g:ycm_key_invoke_completion = ['<C-z>']
" 停止显示补全列表(防止列表影响视野), 可以按<C-Space>重新弹出
"let g:ycm_key_list_stop_completion = ['<C-s>']



